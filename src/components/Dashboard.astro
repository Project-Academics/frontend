---
import '@material/web/button/filled-button.js';
import '@material/web/textfield/outlined-text-field.js';
import '@material/web/progress/circular-progress.js';
---

<style>
  .uploader-container {
    font-family: 'Roboto', sans-serif;
    padding: 2rem;
    display: grid;
    gap: 2rem;
    grid-template-columns: 1fr 1fr;
    align-items: start;
  }

  .uploader-card {
    background: #f9f9fb;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    border: 2px dashed #ccc;
    transition: border-color 0.3s;
  }

  .uploader-card.dragover {
    border-color: #6200ee;
    background: #f0ebff;
  }

  .card-title {
    font-size: 1.4rem;
    font-weight: bold;
  }

  .file-preview {
    margin-top: 0.5rem;
    font-size: 0.95rem;
    color: #333;
  }

  .response-box {
    background: #fff;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    min-height: 200px;
  }

  md-circular-progress {
    margin-top: 1rem;
    align-self: center;
  }
</style>

<div class="uploader-container">
  <div class="uploader-card" id="drop-zone">
    <div class="card-title">Upload Document</div>
    <p>Drag & drop PNG or PDF here, or click to select.</p>
    <input type="file" accept=".png,.pdf" id="file-input" hidden />
    <div class="file-preview" id="file-name">No file selected.</div>
    <md-filled-button id="upload-btn" disabled>Upload</md-filled-button>
    <md-circular-progress id="loader" indeterminate style="display: none;"></md-circular-progress>
  </div>

  <div class="response-box" id="response-box">
    <div class="card-title">Backend Response</div>
    <p id="response-text">Awaiting upload...</p>
  </div>
</div>

<script type="module">
  const dropZone = document.getElementById('drop-zone');
  const fileInput = document.getElementById('file-input');
  const fileNameDisplay = document.getElementById('file-name');
  const uploadBtn = document.getElementById('upload-btn');
  const loader = document.getElementById('loader');
  const responseText = document.getElementById('response-text');

  let selectedFile = null;

  dropZone.addEventListener('click', () => fileInput.click());

  fileInput.addEventListener('change', (e) => {
    selectedFile = e.target.files[0];
    if (selectedFile) {
      fileNameDisplay.textContent = selectedFile.name;
      uploadBtn.disabled = false;
    }
  });

  dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.classList.add('dragover');
  });

  dropZone.addEventListener('dragleave', () => {
    dropZone.classList.remove('dragover');
  });

  dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.classList.remove('dragover');
    const file = e.dataTransfer.files[0];
    if (file && (file.type === 'application/pdf' || file.type.startsWith('image/'))) {
      selectedFile = file;
      fileNameDisplay.textContent = file.name;
      uploadBtn.disabled = false;
    }
  });

  uploadBtn.addEventListener('click', async () => {
    if (!selectedFile) return;

    loader.style.display = 'inline-block';
    uploadBtn.disabled = true;
    responseText.textContent = 'Uploading...';

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      // Replace '/api/upload' with your actual backend endpoint
      const res = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();
      responseText.textContent = result.message || 'Upload complete!';
    } catch (error) {
      responseText.textContent = 'Failed to upload file.';
    } finally {
      loader.style.display = 'none';
      uploadBtn.disabled = false;
    }
  });
</script>
